name: Truffle Security Secrets Scanner

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Secret Scanning
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified
        continue-on-error: true

      - name: Capture TruffleHog Output
        run: |
          # Directly capture TruffleHog output to a file
          trufflehog --only-verified --json . > trufflehog_output.json || true
          echo "TruffleHog output captured."

      - name: Debug TruffleHog Output
        run: |
          # Read the output from the file
          report=$(cat trufflehog_output.json)
          echo "Raw TruffleHog output:"
          echo "$report"

      - name: Send TruffleHog findings to Snyk
        run: |
          report=$(cat trufflehog_output.json)
          
          # Check if report is empty
          if [ -z "$report" ]; then
            echo "No output from TruffleHog. Exiting."
            exit 1
          fi

          # Convert report to Snyk format
          snyk_payload=$(echo "$report" | jq '[.[] | { id: .path, title: .issue, severity: .severity, description: .reason }]')

          # Structure the payload as expected by Snyk
          snyk_json_payload=$(jq -n --argjson issues "$snyk_payload" '{ issues: $issues }')

          # Check the snyk_payload
          echo "Snyk Payload: $snyk_json_payload"

          if [ "$snyk_payload" != "[]" ]; then
            response=$(curl -X POST \
              -H "Authorization: token ${{ secrets.SNYK_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$snyk_json_payload" \
              "https://snyk.io/api/v1/test")

            echo "Snyk API Response: $response"
          else
            echo "No findings to send to Snyk."
          fi









        

